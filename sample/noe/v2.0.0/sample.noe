// sample.enhanced.noe
// Example demonstrating the enhanced .noe grammar capabilities
// Copyright (c) 2025 Napol Thanarangkaun (napol@noesis.run). All rights reserved.
// Licensed under the Noesis License.

@version(2.0.0);
@author("Napol Thanarangkaun");
@date("2025-05-15");

import "quantum_gates.noe" as qgates;
import "standard_types.noe";

/* This is a multi-line comment
   demonstrating the enhanced grammar */

field QuantumMind {
  // Nested field structure
  metadata {
    define created_at: @timestamp("2025-05-15T14:32:00Z");
    define version: @string("2.0.0");
    define tags: @array(["quantum", "mind", "enhanced"]);
  }

  // Enhanced type expressions
  define state: @enum("active", "dormant", "learning") {
    current = "active";
    last_changed = "2025-05-15T10:00:00Z";
  };

  define emotion: @superposition {
    joy = 0.6;
    fear = 0.2;
    curiosity = 0.2;
  }
  entangled_with = [intent.explore, memory.snapshot.001];

  // Object literals
  define properties: @object {
    config = {
      "refresh_rate": 100,
      "auto_learn": true,
      "threshold": 0.75
    };
  };

  define intent: @dynamic("seek_knowledge") {
    triggers = [emotion, environment];
    priority = 0.85;
  };

  // Nested path identifiers
  define memory.snapshot.001: @fixed("2025-04-01T10:44Z");
  define memory.snapshot.002: @fixed("2025-05-15T14:30Z");

  // Reference to imported definitions
  define standard_types: @reference(#StandardTypes);

  // Enhanced quantum circuit syntax
  quantum_circuit QC_01 {
    qbits: [q0, q1, q2, q3];
    apply:
      H -> q0;
      CX(0.5) -> (q0, q1);
      #qgates.CustomGate -> [q1, q2];
      M -> q1 -> result.output;
    output:
      final_state = q3;
  }
  
  // Scientific notation and hexadecimal support
  define calibration: @number {
    standard = 1.2e-6;
    hex_value = 0xFF;
    binary_value = 0b10101;
  };
}

// Multiple top-level fields
field SystemConfig {
  define mode: @string("production");
  define max_circuits: @int(10);
  define enable_logging: @boolean(true);
  
  // Tuple support
  define coordinates: @tuple {
    position = (45.32, 78.12, 90.5);
    rotation = (0.5, 0.3, 0.1, 0.9);
  };
}
